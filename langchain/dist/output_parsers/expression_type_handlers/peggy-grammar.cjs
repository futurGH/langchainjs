// @ts-nocheck
// Generated by Peggy 3.0.2.
//
// https://peggyjs.org/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var TYPES_TO_PROPERTY_NAMES = {
    CallExpression: "callee",
    MemberExpression: "object",
};
function extractOptional(optional, index) {
    return optional ? optional[index] : null;
}
;
function extractList(list, index) {
    return list.map(function (element) { return element[index]; });
}
;
function buildList(head, tail, index) {
    return [head].concat(extractList(tail, index));
}
;
function optionalList(value) {
    return value !== null ? value : [];
}
;
function peg$padEnd(str, targetLength, padString) {
    padString = padString || " ";
    if (str.length > targetLength) {
        return str;
    }
    targetLength -= str.length;
    padString += padString.repeat(targetLength);
    return str + padString.slice(0, targetLength);
}
class peg$SyntaxError extends Error {
    constructor(message, expected, found, location) {
        super(message);
        this.expected = expected;
        this.found = found;
        this.location = location;
        this.name = "SyntaxError";
    }
    format(sources) {
        var str = "Error: " + this.message; // @ts-nocheck
        if (this.location) {
            var src = null;
            var k;
            for (k = 0; k < sources.length; k++) {
                if (sources[k].source === this.location.source) {
                    src = sources[k].text.split(/\r\n|\n|\r/g);
                    break;
                }
            }
            var s = this.location.start;
            var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
                ? this.location.source.offset(s)
                : s;
            var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
            if (src) {
                var e = this.location.end;
                var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
                var line = src[s.line - 1];
                var last = s.line === e.line ? e.column : line.length + 1;
                var hatLen = (last - s.column) || 1;
                str += "\n --> " + loc + "\n"
                    + filler + " |\n"
                    + offset_s.line + " | " + line + "\n"
                    + filler + " | " + peg$padEnd("", s.column - 1, ' ')
                    + peg$padEnd("", hatLen, "^");
            }
            else {
                str += "\n at " + loc;
            }
        }
        return str;
    }
    static buildMessage(expected, found) {
        var DESCRIBE_EXPECTATION_FNS = {
            literal: function (expectation) {
                return "\"" + literalEscape(expectation.text) + "\"";
            },
            class: function (expectation) {
                var escapedParts = expectation.parts.map(function (part) {
                    return Array.isArray(part)
                        ? classEscape(part[0]) + "-" + classEscape(part[1])
                        : classEscape(part);
                });
                return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
            },
            any: function () {
                return "any character";
            },
            end: function () {
                return "end of input";
            },
            other: function (expectation) {
                return expectation.description;
            }
        };
        function hex(ch) {
            return ch.charCodeAt(0).toString(16).toUpperCase();
        }
        function literalEscape(s) {
            return s
                .replace(/\\/g, "\\\\")
                .replace(/"/g, "\\\"")
                .replace(/\0/g, "\\0")
                .replace(/\t/g, "\\t")
                .replace(/\n/g, "\\n")
                .replace(/\r/g, "\\r")
                .replace(/[\x00-\x0F]/g, function (ch) { return "\\x0" + hex(ch); })
                .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return "\\x" + hex(ch); });
        }
        function classEscape(s) {
            return s
                .replace(/\\/g, "\\\\")
                .replace(/\]/g, "\\]")
                .replace(/\^/g, "\\^")
                .replace(/-/g, "\\-")
                .replace(/\0/g, "\\0")
                .replace(/\t/g, "\\t")
                .replace(/\n/g, "\\n")
                .replace(/\r/g, "\\r")
                .replace(/[\x00-\x0F]/g, function (ch) { return "\\x0" + hex(ch); })
                .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return "\\x" + hex(ch); });
        }
        function describeExpectation(expectation) {
            return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
        }
        function describeExpected(expected) {
            var descriptions = expected.map(describeExpectation);
            var i, j;
            descriptions.sort();
            if (descriptions.length > 0) {
                for (i = 1, j = 1; i < descriptions.length; i++) {
                    if (descriptions[i - 1] !== descriptions[i]) {
                        descriptions[j] = descriptions[i];
                        j++;
                    }
                }
                descriptions.length = j;
            }
            switch (descriptions.length) {
                case 1:
                    return descriptions[0];
                case 2:
                    return descriptions[0] + " or " + descriptions[1];
                default:
                    return descriptions.slice(0, -1).join(", ")
                        + ", or "
                        + descriptions[descriptions.length - 1];
            }
        }
        function describeFound(found) {
            return found ? "\"" + literalEscape(found) + "\"" : "end of input";
        }
        return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
    }
}
function peg$parse(input, options) {
    options = options !== undefined ? options : {};
    var peg$FAILED = {};
    var peg$source = options.grammarSource;
    var peg$startRuleFunctions = { Start: peg$parseStart };
    var peg$startRuleFunction = peg$parseStart;
    var peg$c0 = "\t";
    var peg$c1 = "\v";
    var peg$c2 = "\f";
    var peg$c3 = " ";
    var peg$c4 = "\xA0";
    var peg$c5 = "\uFEFF";
    var peg$c6 = "$";
    var peg$c7 = "_";
    var peg$c8 = "\u200C";
    var peg$c9 = "\u200D";
    var peg$c10 = ".";
    var peg$c11 = "0";
    var peg$c12 = "\"";
    var peg$c13 = "'";
    var peg$c14 = "\\";
    var peg$c15 = "false";
    var peg$c16 = "true";
    var peg$c17 = "null";
    var peg$c18 = "(";
    var peg$c19 = ")";
    var peg$c20 = "[";
    var peg$c21 = "]";
    var peg$c22 = ",";
    var peg$c23 = "{";
    var peg$c24 = "}";
    var peg$c25 = ":";
    var peg$r0 = /^[0-9]/;
    var peg$r1 = /^[1-9]/;
    var peg$r2 = /^[a-z]/;
    var peg$r3 = /^[A-Z]/;
    var peg$e0 = peg$anyExpectation();
    var peg$e1 = peg$literalExpectation("\t", false);
    var peg$e2 = peg$literalExpectation("\v", false);
    var peg$e3 = peg$literalExpectation("\f", false);
    var peg$e4 = peg$literalExpectation(" ", false);
    var peg$e5 = peg$literalExpectation("\xA0", false);
    var peg$e6 = peg$literalExpectation("\uFEFF", false);
    var peg$e7 = peg$literalExpectation("$", false);
    var peg$e8 = peg$literalExpectation("_", false);
    var peg$e9 = peg$literalExpectation("\u200C", false);
    var peg$e10 = peg$literalExpectation("\u200D", false);
    var peg$e11 = peg$literalExpectation(".", false);
    var peg$e12 = peg$literalExpectation("0", false);
    var peg$e13 = peg$classExpectation([["0", "9"]], false, false);
    var peg$e14 = peg$classExpectation([["1", "9"]], false, false);
    var peg$e15 = peg$literalExpectation("\"", false);
    var peg$e16 = peg$literalExpectation("'", false);
    var peg$e17 = peg$literalExpectation("\\", false);
    var peg$e18 = peg$classExpectation([["a", "z"]], false, false);
    var peg$e19 = peg$classExpectation([["A", "Z"]], false, false);
    var peg$e20 = peg$literalExpectation("false", false);
    var peg$e21 = peg$literalExpectation("true", false);
    var peg$e22 = peg$literalExpectation("null", false);
    var peg$e23 = peg$literalExpectation("(", false);
    var peg$e24 = peg$literalExpectation(")", false);
    var peg$e25 = peg$literalExpectation("[", false);
    var peg$e26 = peg$literalExpectation("]", false);
    var peg$e27 = peg$literalExpectation(",", false);
    var peg$e28 = peg$literalExpectation("{", false);
    var peg$e29 = peg$literalExpectation("}", false);
    var peg$e30 = peg$literalExpectation(":", false);
    var peg$f0 = function (program) { return program; };
    var peg$f1 = function (name) { return name; };
    var peg$f2 = function (head, tail) {
        return {
            type: "Identifier",
            name: head + tail.join("")
        };
    };
    var peg$f3 = function () { return { type: "NullLiteral", value: null }; };
    var peg$f4 = function () { return { type: "BooleanLiteral", value: true }; };
    var peg$f5 = function () { return { type: "BooleanLiteral", value: false }; };
    var peg$f6 = function (literal) {
        return literal;
    };
    var peg$f7 = function () {
        return { type: "NumericLiteral", value: parseFloat(text()) };
    };
    var peg$f8 = function () {
        return { type: "NumericLiteral", value: parseFloat(text()) };
    };
    var peg$f9 = function () {
        return { type: "NumericLiteral", value: parseFloat(text()) };
    };
    var peg$f10 = function (chars) {
        return { type: "StringLiteral", value: chars.join("") };
    };
    var peg$f11 = function (chars) {
        return { type: "StringLiteral", value: chars.join("") };
    };
    var peg$f12 = function () { return text(); };
    var peg$f13 = function () { return text(); };
    var peg$f14 = function (expression) { return expression; };
    var peg$f15 = function () { return { type: "ArrayExpression", elements: [] }; };
    var peg$f16 = function (elements) {
        return {
            type: "ArrayExpression",
            elements: elements
        };
    };
    var peg$f17 = function (element) {
        return element;
    };
    var peg$f18 = function (head, element) {
        return element;
    };
    var peg$f19 = function (head, tail) { return Array.prototype.concat.apply(head, tail); };
    var peg$f20 = function () { return { type: "ObjectExpression", properties: [] }; };
    var peg$f21 = function (properties) {
        return { type: "ObjectExpression", properties: properties };
    };
    var peg$f22 = function (properties) {
        return { type: "ObjectExpression", properties: properties };
    };
    var peg$f23 = function (head, tail) {
        return buildList(head, tail, 3);
    };
    var peg$f24 = function (key, value) {
        return { type: "PropertyAssignment", key: key, value: value, kind: "init" };
    };
    var peg$f25 = function (head, property) {
        return { property: property, computed: true };
    };
    var peg$f26 = function (head, property) {
        return { property: property, computed: false };
    };
    var peg$f27 = function (head, tail) {
        return tail.reduce(function (result, element) {
            return {
                type: "MemberExpression",
                object: result,
                property: element.property,
                computed: element.computed
            };
        }, head);
    };
    var peg$f28 = function (callee, args) {
        return { type: "CallExpression", callee: callee, arguments: args };
    };
    var peg$f29 = function (head, args) {
        return { type: "CallExpression", arguments: args };
    };
    var peg$f30 = function (head, property) {
        return {
            type: "MemberExpression",
            property: property,
            computed: true
        };
    };
    var peg$f31 = function (head, property) {
        return {
            type: "MemberExpression",
            property: property,
            computed: false
        };
    };
    var peg$f32 = function (head, tail) {
        return tail.reduce(function (result, element) {
            element[TYPES_TO_PROPERTY_NAMES[element.type]] = result;
            return element;
        }, head);
    };
    var peg$f33 = function (args) {
        return optionalList(extractOptional(args, 0));
    };
    var peg$f34 = function (head, tail) {
        return buildList(head, tail, 3);
    };
    var peg$f35 = function (expression) {
        return {
            type: "ExpressionStatement",
            expression: expression
        };
    };
    var peg$f36 = function (exp) {
        return {
            type: "Program",
            body: exp
        };
    };
    var peg$currPos = 0;
    var peg$savedPos = 0;
    var peg$posDetailsCache = [{ line: 1, column: 1 }];
    var peg$maxFailPos = 0;
    var peg$maxFailExpected = [];
    var peg$silentFails = 0;
    var peg$result;
    if ("startRule" in options) {
        if (!(options.startRule in peg$startRuleFunctions)) {
            throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
        }
        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }
    function text() {
        return input.substring(peg$savedPos, peg$currPos);
    }
    function offset() {
        return peg$savedPos;
    }
    function range() {
        return {
            source: peg$source,
            start: peg$savedPos,
            end: peg$currPos
        };
    }
    function location() {
        return peg$computeLocation(peg$savedPos, peg$currPos);
    }
    function expected(description, location) {
        location = location !== undefined
            ? location
            : peg$computeLocation(peg$savedPos, peg$currPos);
        throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location);
    }
    function error(message, location) {
        location = location !== undefined
            ? location
            : peg$computeLocation(peg$savedPos, peg$currPos);
        throw peg$buildSimpleError(message, location);
    }
    function peg$literalExpectation(text, ignoreCase) {
        return { type: "literal", text: text, ignoreCase: ignoreCase };
    }
    function peg$classExpectation(parts, inverted, ignoreCase) {
        return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }
    function peg$anyExpectation() {
        return { type: "any" };
    }
    function peg$endExpectation() {
        return { type: "end" };
    }
    function peg$otherExpectation(description) {
        return { type: "other", description: description };
    }
    function peg$computePosDetails(pos) {
        var details = peg$posDetailsCache[pos];
        var p;
        if (details) {
            return details;
        }
        else {
            p = pos - 1;
            while (!peg$posDetailsCache[p]) {
                p--;
            }
            details = peg$posDetailsCache[p];
            details = {
                line: details.line,
                column: details.column
            };
            while (p < pos) {
                if (input.charCodeAt(p) === 10) {
                    details.line++;
                    details.column = 1;
                }
                else {
                    details.column++;
                }
                p++;
            }
            peg$posDetailsCache[pos] = details;
            return details;
        }
    }
    function peg$computeLocation(startPos, endPos, offset) {
        var startPosDetails = peg$computePosDetails(startPos);
        var endPosDetails = peg$computePosDetails(endPos);
        var res = {
            source: peg$source,
            start: {
                offset: startPos,
                line: startPosDetails.line,
                column: startPosDetails.column
            },
            end: {
                offset: endPos,
                line: endPosDetails.line,
                column: endPosDetails.column
            }
        };
        if (offset && peg$source && (typeof peg$source.offset === "function")) {
            res.start = peg$source.offset(res.start);
            res.end = peg$source.offset(res.end);
        }
        return res;
    }
    function peg$fail(expected) {
        if (peg$currPos < peg$maxFailPos) {
            return;
        }
        if (peg$currPos > peg$maxFailPos) {
            peg$maxFailPos = peg$currPos;
            peg$maxFailExpected = [];
        }
        peg$maxFailExpected.push(expected);
    }
    function peg$buildSimpleError(message, location) {
        return new peg$SyntaxError(message, null, null, location);
    }
    function peg$buildStructuredError(expected, found, location) {
        return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);
    }
    function peg$parseStart() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        s1 = peg$parse__();
        s2 = peg$parseProgram();
        if (s2 !== peg$FAILED) {
            s3 = peg$parse__();
            peg$savedPos = s0;
            s0 = peg$f0(s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseSourceCharacter() {
        var s0;
        if (input.length > peg$currPos) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e0);
            }
        }
        return s0;
    }
    function peg$parseWhiteSpace() {
        var s0;
        if (input.charCodeAt(peg$currPos) === 9) {
            s0 = peg$c0;
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e1);
            }
        }
        if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 11) {
                s0 = peg$c1;
                peg$currPos++;
            }
            else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e2);
                }
            }
            if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 12) {
                    s0 = peg$c2;
                    peg$currPos++;
                }
                else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e3);
                    }
                }
                if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 32) {
                        s0 = peg$c3;
                        peg$currPos++;
                    }
                    else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e4);
                        }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 160) {
                            s0 = peg$c4;
                            peg$currPos++;
                        }
                        else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e5);
                            }
                        }
                        if (s0 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 65279) {
                                s0 = peg$c5;
                                peg$currPos++;
                            }
                            else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$e6);
                                }
                            }
                        }
                    }
                }
            }
        }
        return s0;
    }
    function peg$parseIdentifier() {
        var s0, s1, s2;
        s0 = peg$currPos;
        s1 = peg$currPos;
        peg$silentFails++;
        s2 = peg$parseReservedWord();
        peg$silentFails--;
        if (s2 === peg$FAILED) {
            s1 = undefined;
        }
        else {
            peg$currPos = s1;
            s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseIdentifierName();
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f1(s2);
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseIdentifierName() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        s1 = peg$parseIdentifierStart();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseIdentifierPart();
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseIdentifierPart();
            }
            peg$savedPos = s0;
            s0 = peg$f2(s1, s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseIdentifierStart() {
        var s0;
        s0 = peg$parseUnicodeLetter();
        if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 36) {
                s0 = peg$c6;
                peg$currPos++;
            }
            else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e7);
                }
            }
            if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 95) {
                    s0 = peg$c7;
                    peg$currPos++;
                }
                else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e8);
                    }
                }
            }
        }
        return s0;
    }
    function peg$parseIdentifierPart() {
        var s0;
        s0 = peg$parseIdentifierStart();
        if (s0 === peg$FAILED) {
            s0 = peg$parseNd();
            if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 8204) {
                    s0 = peg$c8;
                    peg$currPos++;
                }
                else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e9);
                    }
                }
                if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 8205) {
                        s0 = peg$c9;
                        peg$currPos++;
                    }
                    else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e10);
                        }
                    }
                }
            }
        }
        return s0;
    }
    function peg$parseUnicodeLetter() {
        var s0;
        s0 = peg$parseLu();
        if (s0 === peg$FAILED) {
            s0 = peg$parseLl();
        }
        return s0;
    }
    function peg$parseReservedWord() {
        var s0;
        s0 = peg$parseNullToken();
        if (s0 === peg$FAILED) {
            s0 = peg$parseTrueToken();
            if (s0 === peg$FAILED) {
                s0 = peg$parseFalseToken();
            }
        }
        return s0;
    }
    function peg$parseLiteral() {
        var s0;
        s0 = peg$parseNullLiteral();
        if (s0 === peg$FAILED) {
            s0 = peg$parseBooleanLiteral();
            if (s0 === peg$FAILED) {
                s0 = peg$parseNumericLiteral();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseStringLiteral();
                }
            }
        }
        return s0;
    }
    function peg$parseNullLiteral() {
        var s0, s1;
        s0 = peg$currPos;
        s1 = peg$parseNullToken();
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f3();
        }
        s0 = s1;
        return s0;
    }
    function peg$parseBooleanLiteral() {
        var s0, s1;
        s0 = peg$currPos;
        s1 = peg$parseTrueToken();
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f4();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseFalseToken();
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f5();
            }
            s0 = s1;
        }
        return s0;
    }
    function peg$parseNumericLiteral() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        s1 = peg$parseDecimalLiteral();
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            peg$silentFails++;
            s3 = peg$parseIdentifierStart();
            if (s3 === peg$FAILED) {
                s3 = peg$parseDecimalDigit();
            }
            peg$silentFails--;
            if (s3 === peg$FAILED) {
                s2 = undefined;
            }
            else {
                peg$currPos = s2;
                s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f6(s1);
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseDecimalLiteral() {
        var s0, s1, s2, s3, s4;
        s0 = peg$currPos;
        s1 = peg$parseDecimalIntegerLiteral();
        if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
                s2 = peg$c10;
                peg$currPos++;
            }
            else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e11);
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parseDecimalDigit();
                while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    s4 = peg$parseDecimalDigit();
                }
                peg$savedPos = s0;
                s0 = peg$f7();
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 46) {
                s1 = peg$c10;
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e11);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseDecimalDigit();
                if (s3 !== peg$FAILED) {
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parseDecimalDigit();
                    }
                }
                else {
                    s2 = peg$FAILED;
                }
                if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f8();
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseDecimalIntegerLiteral();
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f9();
                }
                s0 = s1;
            }
        }
        return s0;
    }
    function peg$parseDecimalIntegerLiteral() {
        var s0, s1, s2, s3;
        if (input.charCodeAt(peg$currPos) === 48) {
            s0 = peg$c11;
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e12);
            }
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseNonZeroDigit();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseDecimalDigit();
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parseDecimalDigit();
                }
                s1 = [s1, s2];
                s0 = s1;
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        return s0;
    }
    function peg$parseDecimalDigit() {
        var s0;
        if (peg$r0.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e13);
            }
        }
        return s0;
    }
    function peg$parseNonZeroDigit() {
        var s0;
        if (peg$r1.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e14);
            }
        }
        return s0;
    }
    function peg$parseStringLiteral() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
            s1 = peg$c12;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e15);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseDoubleStringCharacter();
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseDoubleStringCharacter();
            }
            if (input.charCodeAt(peg$currPos) === 34) {
                s3 = peg$c12;
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e15);
                }
            }
            if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f10(s2);
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 39) {
                s1 = peg$c13;
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e16);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseSingleStringCharacter();
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parseSingleStringCharacter();
                }
                if (input.charCodeAt(peg$currPos) === 39) {
                    s3 = peg$c13;
                    peg$currPos++;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e16);
                    }
                }
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f11(s2);
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        return s0;
    }
    function peg$parseDoubleStringCharacter() {
        var s0, s1, s2;
        s0 = peg$currPos;
        s1 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 34) {
            s2 = peg$c12;
            peg$currPos++;
        }
        else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e15);
            }
        }
        if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 92) {
                s2 = peg$c14;
                peg$currPos++;
            }
            else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e17);
                }
            }
        }
        peg$silentFails--;
        if (s2 === peg$FAILED) {
            s1 = undefined;
        }
        else {
            peg$currPos = s1;
            s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseSourceCharacter();
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f12();
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseSingleStringCharacter() {
        var s0, s1, s2;
        s0 = peg$currPos;
        s1 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 39) {
            s2 = peg$c13;
            peg$currPos++;
        }
        else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e16);
            }
        }
        if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 92) {
                s2 = peg$c14;
                peg$currPos++;
            }
            else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e17);
                }
            }
        }
        peg$silentFails--;
        if (s2 === peg$FAILED) {
            s1 = undefined;
        }
        else {
            peg$currPos = s1;
            s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseSourceCharacter();
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f13();
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseSingleEscapeCharacter() {
        var s0;
        if (input.charCodeAt(peg$currPos) === 39) {
            s0 = peg$c13;
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e16);
            }
        }
        if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
                s0 = peg$c12;
                peg$currPos++;
            }
            else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e15);
                }
            }
        }
        return s0;
    }
    function peg$parseLl() {
        var s0;
        if (peg$r2.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e18);
            }
        }
        return s0;
    }
    function peg$parseLu() {
        var s0;
        if (peg$r3.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e19);
            }
        }
        return s0;
    }
    function peg$parseNd() {
        var s0;
        if (peg$r0.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e13);
            }
        }
        return s0;
    }
    function peg$parseFalseToken() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c15) {
            s1 = peg$c15;
            peg$currPos += 5;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e20);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            peg$silentFails++;
            s3 = peg$parseIdentifierPart();
            peg$silentFails--;
            if (s3 === peg$FAILED) {
                s2 = undefined;
            }
            else {
                peg$currPos = s2;
                s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseTrueToken() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c16) {
            s1 = peg$c16;
            peg$currPos += 4;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e21);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            peg$silentFails++;
            s3 = peg$parseIdentifierPart();
            peg$silentFails--;
            if (s3 === peg$FAILED) {
                s2 = undefined;
            }
            else {
                peg$currPos = s2;
                s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseNullToken() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c17) {
            s1 = peg$c17;
            peg$currPos += 4;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e22);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            peg$silentFails++;
            s3 = peg$parseIdentifierPart();
            peg$silentFails--;
            if (s3 === peg$FAILED) {
                s2 = undefined;
            }
            else {
                peg$currPos = s2;
                s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parse__() {
        var s0, s1;
        s0 = [];
        s1 = peg$parseWhiteSpace();
        while (s1 !== peg$FAILED) {
            s0.push(s1);
            s1 = peg$parseWhiteSpace();
        }
        return s0;
    }
    function peg$parsePrimaryExpression() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$parseIdentifier();
        if (s0 === peg$FAILED) {
            s0 = peg$parseLiteral();
            if (s0 === peg$FAILED) {
                s0 = peg$parseArrayExpression();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseObjectExpression();
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 40) {
                            s1 = peg$c18;
                            peg$currPos++;
                        }
                        else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e23);
                            }
                        }
                        if (s1 !== peg$FAILED) {
                            s2 = peg$parse__();
                            s3 = peg$parseExpression();
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parse__();
                                if (input.charCodeAt(peg$currPos) === 41) {
                                    s5 = peg$c19;
                                    peg$currPos++;
                                }
                                else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$e24);
                                    }
                                }
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s0 = peg$f14(s3);
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                }
            }
        }
        return s0;
    }
    function peg$parseArrayExpression() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c20;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e25);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 93) {
                s3 = peg$c21;
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e26);
                }
            }
            if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f15();
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
                s1 = peg$c20;
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e25);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parse__();
                s3 = peg$parseElementList();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse__();
                    if (input.charCodeAt(peg$currPos) === 93) {
                        s5 = peg$c21;
                        peg$currPos++;
                    }
                    else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e26);
                        }
                    }
                    if (s5 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f16(s3);
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        return s0;
    }
    function peg$parseElementList() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parseExpression();
        if (s2 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$f17(s2);
        }
        s1 = s2;
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 44) {
                s5 = peg$c22;
                peg$currPos++;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e27);
                }
            }
            if (s5 !== peg$FAILED) {
                s6 = peg$parse__();
                s7 = peg$parseExpression();
                if (s7 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s3 = peg$f18(s1, s7);
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parse__();
                if (input.charCodeAt(peg$currPos) === 44) {
                    s5 = peg$c22;
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e27);
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__();
                    s7 = peg$parseExpression();
                    if (s7 !== peg$FAILED) {
                        peg$savedPos = s3;
                        s3 = peg$f18(s1, s7);
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            peg$savedPos = s0;
            s0 = peg$f19(s1, s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseObjectExpression() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
            s1 = peg$c23;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e28);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 125) {
                s3 = peg$c24;
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e29);
                }
            }
            if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f20();
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 123) {
                s1 = peg$c23;
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e28);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parse__();
                s3 = peg$parsePropertyNameAndValueList();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse__();
                    if (input.charCodeAt(peg$currPos) === 125) {
                        s5 = peg$c24;
                        peg$currPos++;
                    }
                    else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e29);
                        }
                    }
                    if (s5 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f21(s3);
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 123) {
                    s1 = peg$c23;
                    peg$currPos++;
                }
                else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e28);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse__();
                    s3 = peg$parsePropertyNameAndValueList();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse__();
                        if (input.charCodeAt(peg$currPos) === 44) {
                            s5 = peg$c22;
                            peg$currPos++;
                        }
                        else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e27);
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parse__();
                            if (input.charCodeAt(peg$currPos) === 125) {
                                s7 = peg$c24;
                                peg$currPos++;
                            }
                            else {
                                s7 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$e29);
                                }
                            }
                            if (s7 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s0 = peg$f22(s3);
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
        }
        return s0;
    }
    function peg$parsePropertyNameAndValueList() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        s0 = peg$currPos;
        s1 = peg$parsePropertyAssignment();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 44) {
                s5 = peg$c22;
                peg$currPos++;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e27);
                }
            }
            if (s5 !== peg$FAILED) {
                s6 = peg$parse__();
                s7 = peg$parsePropertyAssignment();
                if (s7 !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7];
                    s3 = s4;
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parse__();
                if (input.charCodeAt(peg$currPos) === 44) {
                    s5 = peg$c22;
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e27);
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__();
                    s7 = peg$parsePropertyAssignment();
                    if (s7 !== peg$FAILED) {
                        s4 = [s4, s5, s6, s7];
                        s3 = s4;
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            peg$savedPos = s0;
            s0 = peg$f23(s1, s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsePropertyAssignment() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        s1 = peg$parsePropertyName();
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 58) {
                s3 = peg$c25;
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e30);
                }
            }
            if (s3 !== peg$FAILED) {
                s4 = peg$parse__();
                s5 = peg$parseExpression();
                if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f24(s1, s5);
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsePropertyName() {
        var s0;
        s0 = peg$parseIdentifierName();
        if (s0 === peg$FAILED) {
            s0 = peg$parseStringLiteral();
            if (s0 === peg$FAILED) {
                s0 = peg$parseNumericLiteral();
            }
        }
        return s0;
    }
    function peg$parseNode() {
        var s0;
        s0 = peg$parseArrayExpression();
        if (s0 === peg$FAILED) {
            s0 = peg$parseBooleanLiteral();
            if (s0 === peg$FAILED) {
                s0 = peg$parseCallExpression();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseIdentifier();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseMemberExpression();
                        if (s0 === peg$FAILED) {
                            s0 = peg$parseNumericLiteral();
                            if (s0 === peg$FAILED) {
                                s0 = peg$parseObjectExpression();
                                if (s0 === peg$FAILED) {
                                    s0 = peg$parsePropertyAssignment();
                                    if (s0 === peg$FAILED) {
                                        s0 = peg$parseStringLiteral();
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return s0;
    }
    function peg$parseMemberExpression() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
        s0 = peg$currPos;
        s1 = peg$parsePrimaryExpression();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 91) {
                s5 = peg$c20;
                peg$currPos++;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e25);
                }
            }
            if (s5 !== peg$FAILED) {
                s6 = peg$parse__();
                s7 = peg$parseExpression();
                if (s7 !== peg$FAILED) {
                    s8 = peg$parse__();
                    if (input.charCodeAt(peg$currPos) === 93) {
                        s9 = peg$c21;
                        peg$currPos++;
                    }
                    else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e26);
                        }
                    }
                    if (s9 !== peg$FAILED) {
                        peg$savedPos = s3;
                        s3 = peg$f25(s1, s7);
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                s4 = peg$parse__();
                if (input.charCodeAt(peg$currPos) === 46) {
                    s5 = peg$c10;
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e11);
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__();
                    s7 = peg$parseIdentifierName();
                    if (s7 !== peg$FAILED) {
                        peg$savedPos = s3;
                        s3 = peg$f26(s1, s7);
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parse__();
                if (input.charCodeAt(peg$currPos) === 91) {
                    s5 = peg$c20;
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e25);
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__();
                    s7 = peg$parseExpression();
                    if (s7 !== peg$FAILED) {
                        s8 = peg$parse__();
                        if (input.charCodeAt(peg$currPos) === 93) {
                            s9 = peg$c21;
                            peg$currPos++;
                        }
                        else {
                            s9 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e26);
                            }
                        }
                        if (s9 !== peg$FAILED) {
                            peg$savedPos = s3;
                            s3 = peg$f25(s1, s7);
                        }
                        else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
                if (s3 === peg$FAILED) {
                    s3 = peg$currPos;
                    s4 = peg$parse__();
                    if (input.charCodeAt(peg$currPos) === 46) {
                        s5 = peg$c10;
                        peg$currPos++;
                    }
                    else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e11);
                        }
                    }
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse__();
                        s7 = peg$parseIdentifierName();
                        if (s7 !== peg$FAILED) {
                            peg$savedPos = s3;
                            s3 = peg$f26(s1, s7);
                        }
                        else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
            }
            peg$savedPos = s0;
            s0 = peg$f27(s1, s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseCallExpression() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parseMemberExpression();
        if (s2 !== peg$FAILED) {
            s3 = peg$parse__();
            s4 = peg$parseArguments();
            if (s4 !== peg$FAILED) {
                peg$savedPos = s1;
                s1 = peg$f28(s2, s4);
            }
            else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s1;
            s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parse__();
            s5 = peg$parseArguments();
            if (s5 !== peg$FAILED) {
                peg$savedPos = s3;
                s3 = peg$f29(s1, s5);
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                s4 = peg$parse__();
                if (input.charCodeAt(peg$currPos) === 91) {
                    s5 = peg$c20;
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e25);
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__();
                    s7 = peg$parseExpression();
                    if (s7 !== peg$FAILED) {
                        s8 = peg$parse__();
                        if (input.charCodeAt(peg$currPos) === 93) {
                            s9 = peg$c21;
                            peg$currPos++;
                        }
                        else {
                            s9 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e26);
                            }
                        }
                        if (s9 !== peg$FAILED) {
                            peg$savedPos = s3;
                            s3 = peg$f30(s1, s7);
                        }
                        else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
                if (s3 === peg$FAILED) {
                    s3 = peg$currPos;
                    s4 = peg$parse__();
                    if (input.charCodeAt(peg$currPos) === 46) {
                        s5 = peg$c10;
                        peg$currPos++;
                    }
                    else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e11);
                        }
                    }
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse__();
                        s7 = peg$parseIdentifierName();
                        if (s7 !== peg$FAILED) {
                            peg$savedPos = s3;
                            s3 = peg$f31(s1, s7);
                        }
                        else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parse__();
                s5 = peg$parseArguments();
                if (s5 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s3 = peg$f29(s1, s5);
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
                if (s3 === peg$FAILED) {
                    s3 = peg$currPos;
                    s4 = peg$parse__();
                    if (input.charCodeAt(peg$currPos) === 91) {
                        s5 = peg$c20;
                        peg$currPos++;
                    }
                    else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e25);
                        }
                    }
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse__();
                        s7 = peg$parseExpression();
                        if (s7 !== peg$FAILED) {
                            s8 = peg$parse__();
                            if (input.charCodeAt(peg$currPos) === 93) {
                                s9 = peg$c21;
                                peg$currPos++;
                            }
                            else {
                                s9 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$e26);
                                }
                            }
                            if (s9 !== peg$FAILED) {
                                peg$savedPos = s3;
                                s3 = peg$f30(s1, s7);
                            }
                            else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    if (s3 === peg$FAILED) {
                        s3 = peg$currPos;
                        s4 = peg$parse__();
                        if (input.charCodeAt(peg$currPos) === 46) {
                            s5 = peg$c10;
                            peg$currPos++;
                        }
                        else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e11);
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parse__();
                            s7 = peg$parseIdentifierName();
                            if (s7 !== peg$FAILED) {
                                peg$savedPos = s3;
                                s3 = peg$f31(s1, s7);
                            }
                            else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                }
            }
            peg$savedPos = s0;
            s0 = peg$f32(s1, s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseArguments() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
            s1 = peg$c18;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e23);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            s3 = peg$currPos;
            s4 = peg$parseArgumentList();
            if (s4 !== peg$FAILED) {
                s5 = peg$parse__();
                s4 = [s4, s5];
                s3 = s4;
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
                s3 = null;
            }
            if (input.charCodeAt(peg$currPos) === 41) {
                s4 = peg$c19;
                peg$currPos++;
            }
            else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e24);
                }
            }
            if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f33(s3);
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseArgumentList() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        s0 = peg$currPos;
        s1 = peg$parseExpression();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 44) {
                s5 = peg$c22;
                peg$currPos++;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e27);
                }
            }
            if (s5 !== peg$FAILED) {
                s6 = peg$parse__();
                s7 = peg$parseExpression();
                if (s7 !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7];
                    s3 = s4;
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parse__();
                if (input.charCodeAt(peg$currPos) === 44) {
                    s5 = peg$c22;
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e27);
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__();
                    s7 = peg$parseExpression();
                    if (s7 !== peg$FAILED) {
                        s4 = [s4, s5, s6, s7];
                        s3 = s4;
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            peg$savedPos = s0;
            s0 = peg$f34(s1, s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseExpression() {
        var s0;
        s0 = peg$parseCallExpression();
        if (s0 === peg$FAILED) {
            s0 = peg$parseMemberExpression();
        }
        return s0;
    }
    function peg$parseExpressionStatement() {
        var s0, s1;
        s0 = peg$currPos;
        s1 = peg$parseExpression();
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f35(s1);
        }
        s0 = s1;
        return s0;
    }
    function peg$parseProgram() {
        var s0, s1;
        s0 = peg$currPos;
        s1 = peg$parseExpressionStatement();
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f36(s1);
        }
        s0 = s1;
        return s0;
    }
    peg$result = peg$startRuleFunction();
    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
        return peg$result;
    }
    else {
        if (peg$result !== peg$FAILED && peg$currPos < input.length) {
            peg$fail(peg$endExpectation());
        }
        throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length
            ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
            : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
    }
}
exports.default = {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
};
